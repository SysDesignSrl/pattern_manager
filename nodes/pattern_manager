#!/usr/bin/env python

# Copyright 2019 Danish Technological Institute (DTI)

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Mads Vainoe Baatrup

import rospy
import ast

from pattern_manager import util
from pattern_manager import XForm
from pattern_manager import srv as pm_srv
from pattern_manager import msg as pm_msg
from std_srvs.srv import Trigger, TriggerResponse
from geometry_msgs.msg import Vector3, Quaternion


class PatternManagerNode(object):

    def __init__(self):
        t0 = XForm(name='root', parent=None, ref_frame='world')
        t1 = XForm(t0)
        t2 = XForm(t0)

        t3 = XForm(t2)
        t4 = XForm(t2)
        t5 = XForm(t2)

        t6 = XForm(t1)
        t7 = XForm(t1)

        t8 = XForm(t6)
        t9 = XForm(t6)

        t10 = XForm(t7)
        t11 = XForm(t7)

        t0.set_active(True)

        rospy.Service('~get_transforms', pm_srv.GroupTree, self.cb_get_transforms)
        rospy.Service('~create_transform', pm_srv.CreateGroup, self.cb_create_transform)
        rospy.Service('~set_active', pm_srv.SetActive, self.cb_set_active)
        rospy.Service('~remove_transform', pm_srv.NodeId, self.cb_remove_transform)
        rospy.Service('~iterate', Trigger, self.cb_iterate)
        rospy.Service('~update_tf_variable', pm_srv.UpdateVar, self.cb_update_tf_variable)
        rospy.Service('~get_current_tf_id', pm_srv.IdRequest, self.cb_get_current_tf_id)
        rospy.Service('~get_active_ids', pm_srv.ActiveIds, self.cb_get_active_ids)
        rospy.Service('~create_linear_pattern', pm_srv.CreateLinearPattern, self.cb_create_linear_pattern)
        rospy.Service('~create_rectangular_pattern', pm_srv.CreateRectangularPattern, self.cb_create_rectangular_pattern)
        rospy.Service('~create_circular_pattern', pm_srv.CreateCircularPattern, self.cb_create_circular_pattern)
        rospy.Service('~create_scatter_pattern', pm_srv.CreateScatterPattern, self.cb_create_scatter_pattern)

    @staticmethod
    def cb_create_linear_pattern(req):
        rospy.logdebug("Received request to create a linear pattern")
        resp = pm_srv.CreateLinearPatternResponse()

        try:
            args = []

            for a in [req.num_points, req.step_size, req.length]:
                if a:
                    arg = ast.literal_eval(a)
                    args.append(arg)

            util.create_pattern('linear', XForm.get_node(req.parent_id), args)

            rospy.logout("Linear pattern successfully created!")
            resp.success = True
        except IndexError, e:
            rospy.logwarn("Could not create pattern: %s" % e)
            resp.success = False

        return resp

    @staticmethod
    def cb_create_rectangular_pattern(req):
        rospy.logdebug("Received request to create a rectangular pattern")
        resp = pm_srv.CreateRectangularPatternResponse()

        try:
            args = []

            for a in [req.num_points, req.step_sizes, req.lengths]:
                if a:
                    arg = ast.literal_eval(a)
                    args.append(arg)

            util.create_pattern('rectangular', XForm.get_node(req.parent_id), args)

            rospy.logout("Rectangular pattern successfully created!")
            resp.success = True
        except IndexError, e:
            rospy.logwarn("Could not create pattern: %s" % e)
            resp.success = False

        return resp

    @staticmethod
    def cb_create_circular_pattern(req):
        pass

    @staticmethod
    def cb_create_scatter_pattern(req):
        pass

    @staticmethod
    def cb_get_active_ids(self):
        rospy.logdebug("Received request to retrieve active transform ids")
        resp = pm_srv.ActiveIdsResponse()

        for n in XForm.get_active_nodes():
            resp.ids.append(id(n))

        return resp

    @staticmethod
    def cb_get_current_tf_id(req):
        rospy.logdebug("Received request to retrieve current transform id")
        resp = pm_srv.IdRequestResponse()

        id_ = id(XForm.get_current_node())

        if id_:
            resp.id = id_
            resp.success = True
        else:
            resp.success = False

        return resp

    @staticmethod
    def cb_iterate(req):
        rospy.logdebug('Received request to iterate')
        resp = TriggerResponse()

        if XForm.get_current_node():
            XForm.iterate()

            resp.success = True
        else:
            resp.success = False

        return resp

    @staticmethod
    def cb_update_tf_variable(req):
        rospy.logdebug('Received request to change value of attribute %s to: %s' % (req.var, req.val))
        resp = pm_srv.UpdateVarResponse()

        try:
            n = XForm.get_node(req.id)
            attr = getattr(n, req.var)
            val = req.val

            if not hasattr(n, req.var):
                raise Exception("Attribute %s does not exist in %s" % (req.var, n))

            if not type(attr) is str:
                val = ast.literal_eval(val)

                if type(attr) is Vector3:
                    val = Vector3(x=val[0], y=val[1], z=val[2])
                elif type(attr) is Quaternion:
                    val = Quaternion(x=val[0], y=val[1], z=val[2], w=val[3])

            setattr(n, req.var, val)

            rospy.logout("Transform variable %s succesfully changed to: %s" % (req.var, val))
            resp.success = True
        except:
            rospy.logwarn("Could not change transform variable %s to: %s" % (req.var, req.val))
            resp.success = False

        return resp

    @staticmethod
    def cb_get_transforms(req):
        rospy.logdebug("Received request to retrieve all transforms")
        resp = pm_srv.GroupTreeResponse()

        t_list = []
        for t in XForm.get_nodes():
            t_params = pm_msg.Params()
            t_params.name = t.name
            t_params.parent_name = t.name
            t_params.id = id(t)
            t_params.ref_frame = t.ref_frame
            t_params.active = t.active
            t_params.translation = t.translation
            t_params.rotation = t.rotation

            if t.parent:
                t_params.parent_name = t.parent.name

            t_list.append(t_params)

        resp.group_deps = t_list
        resp.success = True

        return resp

    @staticmethod
    def cb_create_transform(req):
        rospy.logdebug("Received request to create transform")
        resp = pm_srv.CreateGroupResponse()

        if not req.group_name:
            rospy.logwarn("Transform must have a name!")
            resp.success = False

            return resp

        try:
            XForm(XForm.get_node(req.parent_id), ref_frame=req.ref_frame)
            rospy.logout("Transform {} successfully created!".format(req.group_name))
            resp.success = True
        except IndexError, e:
            rospy.logwarn("Could not create transform %s: %s" % (req.group_name, e))
            resp.success = False

        return resp

    @staticmethod
    def cb_set_active(req):
        rospy.logdebug('Received request to set active transform %s', req.id)
        resp = pm_srv.SetActiveResponse()

        try:
            XForm.get_node(req.id).set_active(req.active)

            rospy.logout("Transform {} successfully activated!".format(req.id))
            resp.success = True
        except IndexError, e:
            rospy.logwarn("Could not activate transform %s: %s" % (req.id, e))
            resp.success = False

        return resp

    @staticmethod
    def cb_remove_transform(req):
        rospy.logdebug('Received request to remove transform %s', req.id)
        resp = pm_srv.NodeIdResponse()

        try:
            XForm.remove_node(req.id)
            rospy.logout("Transform {} successfully removed!".format(req.id))
            resp.success = True
        except IndexError, e:
            rospy.logwarn("Could not remove transform %s: %s" % (req.id, e))
            resp.success = False

        return resp


if __name__ == "__main__":
    rospy.init_node("pattern_manager_old", log_level=rospy.DEBUG)
    pmn = PatternManagerNode()
    rospy.loginfo("Pattern manager node started")

    r = rospy.Rate(5)
    while not rospy.is_shutdown():
        r.sleep()
